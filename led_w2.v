
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module led_w2(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

);

//=======================================================
//  PARAMETER declarations
//=======================================================

  // nope, I'm gonna place it below

//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
//output		     [8:0]		LEDG;
output reg   	     [8:0]		LEDG;
output reg		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================
reg				[2:0]   		key0diy;
reg				[2:0]   		key1diy;
reg				[2:0]   		key2diy;
reg 				[2:0]			turn;
reg				[32:0]		counter_inc;

//=======================================================
//  Structural coding
//=======================================================
parameter shift_time = 32'd25_000_000;     	// determintion of the shift time
parameter shape_led  = 8'b0011_1000;			// to config the shape of leds
always @(posedge CLOCK_50)
begin
		counter_inc <= counter_inc + 1'b1;		// tell <space>'<amount of bit>

		key0diy <= {key0diy[1:0] + !KEY[3]};			// setting the shape of led
		if (!key0diy[2]&&key0diy[1])
			LEDG[7:0] <= SW[7:0];
			
		if (counter_inc == 32'd49_999_999)		// for 50MHz, it means 1 seconds!
			LEDG[7:0] <= shape_led;					// initiallizing
			
		if (LEDG[7])
			LEDR[0] <= 1'b1;
		else if (LEDG[0])
			LEDR[0] <= 1'b0;

		if(LEDR[0])begin
			if (counter_inc % shift_time == 0)
				LEDG <= LEDG >> 1;					//right shift, when redLED is HIGH
		end else if(!LEDR[0])
			if (counter_inc % shift_time == 0)
				LEDG <= LEDG << 1;					//left shift, when redLED is LOW
end
endmodule
